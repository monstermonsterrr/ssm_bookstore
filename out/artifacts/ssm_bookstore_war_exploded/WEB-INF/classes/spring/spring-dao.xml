<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!-- 配置 读取properties文件 jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 配置 数据源 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

      <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
           监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall -->
      <property name="filters" value="stat"/>
      <!-- 最大连接池数量 -->
      <property name="maxActive" value="100"/>
      <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
      <property name="initialSize" value="1"/>
      <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
          缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
      <property name="maxWait" value="60000"/>
      <!-- 最小连接池数量 -->
      <property name="minIdle" value="1"/>

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000"/>
      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000"/>

      <!-- 用来检测连接是否有效的sql，要求是一个查询语句。
          如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
      <property name="validationQuery" value="SELECT 'x'"/>
      <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
          如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
      <property name="testWhileIdle" value="true"/>
      <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
      <property name="testOnBorrow" value="false"/>
      <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
      <property name="testOnReturn" value="false"/>
  </bean>


    <!-- 配置SqlSessionFactory -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 设置MyBatis核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 设置数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值。 -->
        <property name="mapperLocations" value="classpath:/mapper/*.xml" />
        <!-- 那么在Mapper文件里面就可以直接写对应的类名 而不用写全路径名了  -->
        <!-- 跟mybatis中<typeAliases>作用一样 -->
        <!-- <property name="typeAliasesPackage" value="com.jeenotes.ssm.pojo"/> -->

    </bean>

    <!-- 配置Mapper扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 设置Mapper扫描包 -->
        <property name="basePackage" value="/mapper" />
    </bean>

</beans>